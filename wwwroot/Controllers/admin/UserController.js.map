{"version":3,"sources":["../../../src/Controllers/admin/UserController.js"],"names":["UserController","LoadConfig","req","resp","dbConfig","DbConfig","Initialize","then","KeyValues","status","json","catch","err","message","GetAll","console","log","user","model","UserModel","res","error","msg","send","Add","body","userToAdd","user_meta","createdBy","id","createdOn","Date","toLocaleDateString","JSON","stringify","AddNewUserToBeVerified","emailId","verificationStatus","password","AddCustom","userId","SendVerificationEmail","VerifyUser","query","userIv","userContent","siteUrl","site_url","userToUpdate","UpdateCustom","url","ChangePassword","currentPassword","Update","Delete","BaseController"],"mappings":"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","file":"UserController.js","sourcesContent":["import db from '../../db';\r\nimport userModel from '../../users';\r\nimport BaseController from '../BaseController';\r\nimport UserModel from '../../Models/UserModel';\r\nimport DbConfig from '../../commons/DbConfig';\r\nimport { encrypt, getHomePagePath, getSiteUrl,\r\n    createPasswordHash } from '../../utils/general';\r\nimport path from 'path';\r\nimport CandidateModel from '../../Models/CandidateModel';\r\nimport { candidate, student } from '../../commons/RoleDefinitions';\r\n\r\nclass UserController extends BaseController {\r\n\r\n    LoadConfig = (req, resp) => {\r\n        let dbConfig = new DbConfig();\r\n        dbConfig.Initialize().then((KeyValues) => {\r\n            resp.status(200).json(KeyValues);\r\n        }).catch((err) => {\r\n            resp.status(500).json({message: 'Exception in loading config: ' + err});\r\n        })\r\n    }\r\n\r\n    GetAll = (req, resp) => {\r\n        console.log('get all users called', req.user);\r\n        \r\n        let model = new UserModel();\r\n        model.GetAll(req.user)\r\n            .then((res) => {\r\n                console.log('users retrieved');\r\n                resp.status(200).json(res);\r\n            })\r\n            .catch((error) => {\r\n                let msg = \"Error in fetching users: \" + error;\r\n                console.log(msg);\r\n                resp.status(500).send(msg);\r\n            });\r\n    }\r\n\r\n    Add = (req, resp)=>{\r\n        console.log('add user called');\r\n        console.log(req.body);\r\n        let userToAdd = req.body;\r\n        userToAdd = req.body.user_meta;\r\n        \r\n        userToAdd.createdBy = req.user.id;\r\n        userToAdd.createdOn = (new Date()).toLocaleDateString();\r\n\r\n        let model = new UserModel(); \r\n        model.Add(userToAdd)\r\n            .then((res) => {\r\n                if(res) {\r\n                    console.log('User Added');\r\n                    resp.status(200).send(JSON.stringify(req.body));\r\n                }  \r\n            })\r\n            .catch((error) => {\r\n                let msg = \"Error in adding User: \" + error;\r\n                console.log(msg);\r\n                resp.status(500).send(msg);\r\n            });\r\n    }\r\n\r\n    AddNewUserToBeVerified = async (req, resp) => {\r\n        console.log('new user to be confirmed called');\r\n        console.log(req.body);\r\n        let user_meta = req.body.user_meta;\r\n        \r\n        user_meta.createdBy = 'self';\r\n        user_meta.status = 'pending verification';\r\n        user_meta.createdOn = (new Date()).toLocaleDateString();\r\n\r\n        let userToAdd = {\r\n            user_meta,\r\n            emailId: user_meta.emailId,\r\n            verificationStatus: user_meta.status,\r\n            password: createPasswordHash(user_meta.password)\r\n        }\r\n        let model = new UserModel(); \r\n        let userId = await model.AddCustom(userToAdd)\r\n        .catch((err) => {\r\n            let msg = \"Error while adding User: \" + err;\r\n            console.log(msg);\r\n            resp.status(500).send(msg);\r\n        })\r\n        if(userId) {\r\n            console.log('User Added, Id: ', userId);\r\n            \r\n            await model.SendVerificationEmail(userId)\r\n            .catch((err) => {\r\n                let msg = \"Error while sending email: \" + err;\r\n                console.log(msg);\r\n                resp.status(500).send(msg);\r\n            });\r\n            resp.status(200).send(JSON.stringify(userToAdd));\r\n        } else { \r\n            let msg = \"Could not add user. Try after some time\";\r\n            console.log(msg);\r\n            resp.status(500).send(msg);\r\n        }\r\n    }\r\n\r\n    VerifyUser = async (req, resp) => {\r\n        console.log('Verify user called');\r\n        console.log(req.query);\r\n        let { userIv, userContent } = req.query;\r\n        let dbConfig = new DbConfig();\r\n        let KeyValues = await dbConfig.Initialize();\r\n        let siteUrl = KeyValues ? (KeyValues.site_url ? KeyValues.site_url : '') : '';\r\n        console.log('calling decrypt on ', userIv, userContent);\r\n        let model = new UserModel();\r\n        let userToUpdate = await model.VerifyUser(userIv, userContent)\r\n        .catch((err) => {\r\n            let msg = 'User not found or verification link expired. Please sign up again to use the website.' + err;\r\n            resp.status(200).send(msg);\r\n            return;\r\n        });\r\n        if(userToUpdate && userToUpdate.user_meta) {\r\n            userToUpdate.user_meta.status = 'verified'; \r\n            userToUpdate.verificationStatus = 'verified'; \r\n        }\r\n        else {\r\n            let msg = 'User not found or verification link expired. Please sign up again to use the website.'\r\n            resp.status(500).send(msg);\r\n            return;\r\n        }\r\n        model.UpdateCustom(userToUpdate)\r\n            .then(async (res) => {\r\n                if(res) {\r\n                    let url = `${siteUrl}emailVerified`;\r\n                    console.log('User Updated, redirecting to ', url);\r\n                    // resp.redirect(url);\r\n                    resp.status(200).send('Email Id is verifed successfully. You can use your credentials to log in now.');\r\n                }  \r\n            })\r\n            .catch((error) => {\r\n                let msg = \"Error in updating User: \" + error;\r\n                console.log(msg);\r\n                resp.status(500).send(msg);\r\n            });\r\n    }\r\n\r\n    ChangePassword = (req, resp) => {\r\n        console.log('change password called');\r\n        console.log(req.body);\r\n        let { currentPassword, password } = req.body;\r\n        let model = new UserModel(); \r\n        model.ChangePassword(currentPassword, password, req.user)\r\n            .then((res) => {\r\n                if(res) {\r\n                    console.log('Password Updated');\r\n                    resp.status(200).send('success');\r\n                }  \r\n            })\r\n            .catch((error) => {\r\n                let msg = \"Error in updating password: \" + error;\r\n                console.log(msg);\r\n                resp.status(500).send(msg);\r\n            });\r\n    }\r\n\r\n    Update = (req, resp)=>{\r\n        console.log('update user called');\r\n        // let userObj = req.body.user;\r\n        // let dbuser = userModel.UpdateUser(userObj.emailId, userObj);\r\n        // resp.status(200).send(dbuser);\r\n        console.log(req.body);\r\n        let model = new UserModel(); \r\n        model.Update(req.body)\r\n            .then((res) => {\r\n                if(res) {\r\n                    console.log('User Updated');\r\n                    resp.status(200).send(JSON.stringify(req.body));\r\n                }  \r\n            })\r\n            .catch((error) => {\r\n                let msg = \"Error in updating User: \" + error;\r\n                console.log(msg);\r\n                resp.status(500).send(msg);\r\n            });\r\n    }\r\n\r\n    Delete = (req, resp) => {\r\n        console.log('delete user called');\r\n        console.log(req.body);\r\n        // let userObj = req.body.user;\r\n        // userModel.DeleteUser(userObj.emailId);\r\n        // resp.status(200).send('success');\r\n        let model = new UserModel(); \r\n        model.Delete(req.body)\r\n            .then((res) => {\r\n                if(res) {\r\n                    console.log('User deleted');\r\n                    resp.status(200).send(JSON.stringify(req.body));\r\n                }  \r\n            })\r\n            .catch((error) => {\r\n                let msg = \"Error in deleting User: \" + error;\r\n                console.log(msg);\r\n                resp.status(500).send(msg);\r\n            });\r\n    }\r\n\r\n}\r\nexport default new UserController();\r\n"]}